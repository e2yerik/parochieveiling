type Account {
  email: String! @unique
  password: String!
}

type User {
  name: String!
  account: Account! @relation
}

# type AuctionPiece {
#   name: String
#   price: Price
#   """
#   list of all placed bids
#   """
#   bids: [AuctionBid!] @relation
# }

type Price {
  """
  formatted price including currency symbol
  """
  formattedValue: String

  """
  raw price value
  """
  value: Float!

  type: String!
}

type AuctionBid {
  """
  user putting in the bid
  """
  bidder: User

  """
  price point
  """
  priceValue: Float

  """
  time of bid
  """
  timeStamp: String

  """
  product bid on
  """
  product: Product!

  # auctionPiece: AuctionPiece @relation
}

type Product {
  available: Boolean

  code: String!
  name: String!

  """
  short description < 80 characters
  """
  shortDescription: String!

  """
  complete description
  """
  longDescription: String!

  """
  product large image
  """
  imageUrl: String

  """
  product list thumbnail
  """
  thumbUrl: String

  # auctionPiece: AuctionPiece @relation

  """
  positive integer available products for sale. Stock is reduced when user places bid
  """
  stock: Int

  """
  Price
  """
  price: Price!
}

type Query {
  allProducts: [Product]
  accountsByEmail(email: String!): [Account!]!
}

# type Mutation {
#   register(name: String!, email: String!, password: String!): Account! @resolver
#   login(email: String!, password: String!): String! @resolver
#   # buyProduct(productId: Int!, priceValue: Int!): Boolean @resolver
# }
